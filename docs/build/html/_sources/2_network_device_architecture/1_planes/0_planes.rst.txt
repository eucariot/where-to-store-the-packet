Уровни и плоскости
==================

    .. figure:: https://habrastorage.org/webt/v2/tx/q1/v2txq1ilntxxc5qbcrzu__xwhjo.png
           :width: 800
           :align: center

Мы столько раз прежде использовали эти понятия, что пора им уже дать определения.
В работе оборудования можно выделить три уровня/плоскости:

  * **Forwarding/Data Plane**
  * **Control Plane**
  * **Management Plane**

    .. figure:: https://habrastorage.org/webt/zy/sq/ip/zysqipnbjnnjybnt1qxaexuiuec.png           
           :width: 1000
           :align: center

Forwarding/Data Plane
---------------------

Плоскость пересылки.
Главная задача сети - доставить трафик от одного приложения другому. И сделать это максимально быстро, как в плане пропускной способности, так и задержек.
Соответственно главная задача узла - максимально быстро передать вошедший пакет на правильный выходной интерфейс, успев поменять ему заголовки и применив политики.
Поэтому существуют заранее заполненные таблицы передачи пакетов - таблицы коммутации, таблицы маршрутизации, таблицы меток, таблицы соседств итд.
Реализованы они могут быть на специальных чипах CAM, TCAM, работающих на скорости линии (интерфейса). А могут быть и программными.

Примеры:

  #. Принять Ethernet-кадр, посчитать контрольную сумму, проверить есть ли `SMAC <http://lookmeup.linkmeup.ru/#term605>`_ в таблице MAC-адресов. Найти `DMAC <http://lookmeup.linkmeup.ru/#term606>`_ в таблице MAC-адресов, определить интерфейс, передать кадр.
  #. Принять MPLS-пакет, определить входной интерфейс и входную метку. Выполнить поиск в таблице меток, определить выходной интерфейс и выходную метку. Свопнуть. Передать.
  #. Пришёл поток пакетов. Выходным интерфейсом оказался `LAG <http://lookmeup.linkmeup.ru/#term443>`_. Решение, в какие из интерфейсов их отправить, тоже принимается на Forwarding Plane.


Разница между Data и Forwarding Plane
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

В абсолютном большинстве случаев считается, что Data и Forwarding Plane - это одно и то же.
Однако иногда их разделяют.
Тогда Data Plane означает именно манипуляции с полезной нагрузкой: процесс доставки пакета от входного интерфейса к выходному и обработку его в буферах.
А Forwarding Plane - это обработка заголовков и принятие решения о пересылке.

Примерно так:

    .. figure:: https://habrastorage.org/webt/if/c1/j3/ifc1j3de74krybbfjolg186uunq.png           
       :width: 800
       :align: center

Control Plane
-------------

Плоскость управления.
Всему голова. Она **заранее** заполняет таблицы, по которым затем будет передаваться трафик.
Здесь работают протоколы со сложными алгоритмами, которые дорого или невозможно выполнить аппаратно.

Например, `алгоритм Дейкстры <http://lookmeup.linkmeup.ru/#term256>`_ реализовать на чипе можно, но сложно. Так же сложно сделать выбор лучшего маршрута BGP или определение FEC и рассылку меток. Кроме того, для всего этого пришлось бы делать отдельный чип или часть чипа, которая практически не может быть переиспользована.
В такой ситуации лучше пожертвовать сабсекундной сходимостью в пользу удобства и цены.

Поэтому ПО запускается на CPU общего назначения.
Получается медленно, но гибко - вся логика программируема. И на самом деле скорость на Control Plane не важна. Однажды вычисленный маршрут инсталлируется в FIB, а дальше всё на скорости линии.
Вопрос скорости Control Plane возникает при обрывах, флуктуациях на сети, но он сравнительно успешно решается механизмами TE HSB, TE FRR, IP FRR, VPN FRR, когда запасные пути готовятся заранее на том же Control Plane.

<blockquote>
  Примеры:
  <ol>
  <li>Запустили сеть с IGP. Нужно сформировать Hello, согласовать параметры сессий, обменяться базами данных, просчитать кратчайшие маршруты, инсталлировать их в Таблицу Маршрутизации, поддерживать контакт через периодические Keepalive.
  <li>Пришёл ` <http://linkmeup.ru/blog/65.html">BGP Update>`_. Control Plane добавляет новые маршруты в таблицу BGP, выбирает лучший, инсталлирует его в Таблицу Маршрутизации, при необходимости пересылает Update дальше.
  <li>Администратор включил ` <http://linkmeup.ru/blog/154.html">LDP>`_. Для каждого префикса создаётся ` <http://lookmeup.linkmeup.ru/#term477">FEC>`_, назначается метка, помещается в таблицу меток, анонсы уходят всем LDP-соседям.
  <li>Собрали два коммутатора в стек. Выбрать главный, проиндексировать интерфейсы, актуализировать таблицы пересылок - задача Control Plane.
  </ol></blockquote>

Работа и реализация Control Plane универсальна: ЦПУ + оперативная память: работает одинаково хоть на стоечных маршрутизаторах, хоть на виртуальных сетевых устройствах.

Эта система - не мысленный эксперимент, не различные функции одной программы, это действительно физически разделённые тракты, которые взаимодействуют друг с другом.
Началось всё с разнесения плоскостей на разные платы. Далее появились стекируемые устройства, где одно выполняло интеллектуальные операции, а другое было лишь интерфейсным придатком. 
Вчерашний день - это системы вроде Cisco Nexus 5000 Switch + Nexus 2000 Fabric Extender, где 2000 выступает в роли выносной интерфейсной платы для 5000.
Где-то в параллельной Вселенной тихо живёт SDN разлива 1.0 - с Openflow-like механизмами, где Control Plane вынесли на внешние контроллеры, а таблицы пересылок заливаются в совершенно глупые коммутаторы.
Наша реальность и ближайшее будущее - это наложенные сети (Overlay), настраиваемые SDN-контроллерами, где сервисы абстрагированы от физической топологии на более высоком уровне иерархии.
И несмотря на то, что с каждой статьёй мы всё глубже погружаемся в детали, мы учимся мыслить свободно и глобально.


Разделение на Control и Forwarding Plane позволило отвязать передачу данных от работы протоколов и построения сети, а это повлекло значительное повышение масштабируемости и отказоустойчивости.
Так один модуль плоскости управления может поддерживать несколько интерфейсных модулей.
В случае сбоя на плоскости управления механизмы ` <https://www.cisco.com/c/en/us/products/collateral/ios-nx-os-software/high-availability/solution_overview_c22-487228.html">GR, NSR>`_, ` <https://www.juniper.net/documentation/en_US/junos/topics/concept/gres-overview.html">GRES>`_ и ` <https://www.juniper.net/documentation/en_US/junos/topics/concept/issu-on-qfx5100-overview.html">ISSU>`_ помогают плоскости пересылки продолжать работать будто ничего и не было.

<hr>
<a name="MANAGEMENT-PLANE">>`_
<h2>Management Plane</h2>
  Плоскость или демон наблюдения. Не всегда его выделяют в самостоятельную плоскость, относя его задачи к Control Plane, а иногда, выделяя, называют Monitoring.
  Этот модуль отвечает за конфигурацию и жизнедеятельность узла. Он следит за такими параметрами, как:
  <ul>
    <li>Температура
    <li>Утилизация ресурсов
    <li>Электропитание
    <li>Скорость вращения вентиляторов
    <li>Работоспособность плат и модулей.
  </ul>

  <blockquote>
    Примеры:
    <ol>
    <li>Упал интерфейс - генерируется авария, лог и трап на систему мониторинга
    <li>Поднялась температура чипа - увеличивает скорость вращения вентиляторов
    <li>Обнаружил, что одна плата перестала отвечать на периодические запросы - выполняет рестарт плат - вдруг поднимется.
    <li>Оператор подключился по SSH для снятия диагнонстической информации - CLI также обеспечивается Control Plane'ом.
    <li>Приехала конфигурация по Netconf - Management Plane проверяет и применяет её. При необходимости инструктирует Control Plane о произошедших изменениях и необходимых действиях.
    </ol></blockquote>

<hr>
Итак:
**Forwarding Plane** - передача трафика на основе таблиц пересылок - собственно то, из чего оператор извлекает прибыль.
**Control Plane** - служебный уровень, необходимый для формирования условий для работы Forwarding Plane.
**Management Plane** - модуль, следящий за общим состоянием устройства.

Вместе они составляют самодостаточный узел в сети пакетной коммутации.


    .. figure:: https://habrastorage.org/webt/zy/sq/ip/zysqipnbjnnjybnt1qxaexuiuec.png           
           :width: 1000
           :align: center

Разделение на Control и Forwarding/Data Plane - не абстрактное - их функции действительно выполняют разные чипы на плате.
Так Control Plane обычно реализован на связке CPU+RAM+карта памяти, а Forwarding Plane на ASIC, FPGA, CAM, TCAM.
*Но в мире виртуализации сетевых функций всё смешалось - эту ремарку я буду делать до конца статьи.*
<hr>